%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Sun Apr 28 20:32:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGAGGCGCCCGAAACUGAUGAGAACGUUAGGCUUCAUCUCGUUCGAAACGACUAGAUGAAGUCGUAUUUCGGGCGCCUCUGG\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 358.44729614]
[92.50000000 343.44729614]
[92.50000000 328.44729614]
[92.50000000 313.44729614]
[92.50000000 298.44729614]
[92.50000000 283.44729614]
[92.50000000 268.44729614]
[92.50000000 253.44729614]
[92.50000000 238.44729614]
[92.50000000 223.44729614]
[92.50000000 208.44729614]
[92.50000000 193.44729614]
[92.50000000 178.44729614]
[92.50000000 163.44729614]
[92.50000000 148.44729614]
[92.50000000 133.44729614]
[83.90311432 130.26321411]
[76.45762634 124.91442108]
[70.69611359 117.78352356]
[67.03067780 109.38058472]
[65.72351074 100.30665588]
[66.86811829 91.21079254]
[70.38262939 82.74361420]
[76.01564026 75.51078033]
[68.11915588 62.75751877]
[60.22267532 50.00426483]
[52.32619095 37.25100708]
[44.42971039 24.49774933]
[29.34618187 26.59706116]
[14.71462727 22.37361526]
[3.07004952 12.55915260]
[-3.57005787 -1.14591420]
[-4.05525589 -16.36709976]
[1.69851875 -30.46723938]
[12.69439030 -41.00340271]
[27.02725601 -46.15013123]
[42.21386337 -45.01572418]
[55.62303925 -37.79672623]
[64.93155670 -25.74387360]
[68.52667236 -10.94539165]
[65.78549957 4.03479099]
[57.18296814 16.60126686]
[65.07945251 29.35452461]
[72.97592926 42.10778046]
[80.87241364 54.86103821]
[88.76889801 67.61429596]
[99.66314697 65.72379303]
[110.59243774 67.39981842]
[120.41957092 72.46797180]
[128.12199402 80.40089417]
[142.00656128 74.72472382]
[155.89112854 69.04856110]
[169.77569580 63.37239456]
[183.66024780 57.69622803]
[197.54481506 52.02006149]
[203.42837524 37.35175323]
[217.99336243 31.21690178]
[232.59866333 37.25521088]
[238.57917786 51.88425446]
[232.38679504 66.42488098]
[217.69532776 72.25039673]
[203.22097778 65.90462494]
[189.33642578 71.58079529]
[175.45185852 77.25695801]
[161.56729126 82.93312836]
[147.68272400 88.60929108]
[133.79815674 94.28545380]
[128.45692444 119.10954285]
[107.50000000 133.44729614]
[107.50000000 148.44729614]
[107.50000000 163.44729614]
[107.50000000 178.44729614]
[107.50000000 193.44729614]
[107.50000000 208.44729614]
[107.50000000 223.44729614]
[107.50000000 238.44729614]
[107.50000000 253.44729614]
[107.50000000 268.44729614]
[107.50000000 283.44729614]
[107.50000000 298.44729614]
[107.50000000 313.44729614]
[107.50000000 328.44729614]
[107.50000000 343.44729614]
[107.50000000 358.44729614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[7 78]
[8 77]
[9 76]
[10 75]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[16 69]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
