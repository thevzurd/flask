%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Sun Apr 21 22:50:15 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAUACAGACUGAUGAGGGUAAAUACCCUCGAACCAUUACCCGAAACGGAGUAAUGGUUCUUACUCCGUAUCUGUAUAGGA\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 283.83923340]
[92.50000000 268.83923340]
[92.50000000 253.83923340]
[92.50000000 238.83923340]
[92.50000000 223.83923340]
[92.50000000 208.83923340]
[92.50000000 193.83923340]
[92.50000000 178.83923340]
[92.50000000 163.83923340]
[92.50000000 148.83923340]
[92.50000000 133.83923340]
[84.67139435 131.08662415]
[77.72145844 126.55203247]
[72.04858398 120.49542236]
[67.97795868 113.26396179]
[65.74291229 105.27217865]
[65.47156525 96.97818756]
[67.17948151 88.85740662]
[70.76874542 81.37534332]
[60.16214371 70.76874542]
[49.55554199 60.16214371]
[38.94894028 49.55554199]
[28.34233856 38.94894028]
[17.73573685 28.34233856]
[3.70533156 34.19179916]
[-11.49557400 34.22179413]
[-25.54895401 28.42774773]
[-36.31176758 17.69321060]
[-42.14276886 3.65512395]
[-42.15276718 -11.54580784]
[-36.34023666 -25.59155464]
[-25.59155464 -36.34023666]
[-11.54580784 -42.15276718]
[3.65512395 -42.14276886]
[17.69321060 -36.31176758]
[28.42774773 -25.54895401]
[34.22179413 -11.49557400]
[34.19179916 3.70533156]
[28.34233856 17.73573685]
[38.94894028 28.34233856]
[49.55554199 38.94894028]
[60.16214371 49.55554199]
[70.76874542 60.16214371]
[81.37534332 70.76874542]
[94.72638702 65.74313354]
[108.97077179 66.52061462]
[121.69551849 72.96949005]
[130.74505615 83.99731445]
[145.23393250 80.11502838]
[159.72282410 76.23274231]
[174.21171570 72.35046387]
[188.70060730 68.46817780]
[203.18948364 64.58589172]
[217.67837524 60.70360184]
[232.16726685 56.82131577]
[246.65614319 52.93903351]
[254.34024048 39.12852097]
[269.56192017 34.87689972]
[283.29040527 42.70658112]
[287.38085938 57.97235107]
[279.40646362 71.61730194]
[264.09832764 75.54612732]
[250.53843689 67.42791748]
[236.04954529 71.31020355]
[221.56065369 75.19248962]
[207.07177734 79.07477570]
[192.58288574 82.95706177]
[178.09399414 86.83934784]
[163.60511780 90.72163391]
[149.11622620 94.60391998]
[134.62733459 98.48620605]
[127.49795532 121.09992218]
[107.50000000 133.83923340]
[107.50000000 148.83923340]
[107.50000000 163.83923340]
[107.50000000 178.83923340]
[107.50000000 193.83923340]
[107.50000000 208.83923340]
[107.50000000 223.83923340]
[107.50000000 238.83923340]
[107.50000000 253.83923340]
[107.50000000 268.83923340]
[107.50000000 283.83923340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 83]
[2 82]
[3 81]
[4 80]
[5 79]
[6 78]
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
