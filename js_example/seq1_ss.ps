%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Mon Apr 29 00:10:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAGAUGACUGUUCUGAUGAGAGUCUGAAGCAAAUGGGACUCGAAACUGAAGCCCAUUUGCUUCAGUAAACAGUCAUCUUGC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 327.89025879]
[92.50000000 312.89025879]
[92.50000000 297.89025879]
[92.50000000 282.89025879]
[92.50000000 267.89025879]
[92.50000000 252.89025879]
[92.50000000 237.89025879]
[92.50000000 222.89025879]
[92.50000000 207.89025879]
[92.50000000 192.89025879]
[92.50000000 177.89025879]
[92.50000000 162.89025879]
[92.50000000 147.89025879]
[92.50000000 132.89025879]
[84.66129303 130.04568481]
[77.75983429 125.36521149]
[72.21733093 119.13483429]
[68.37244415 111.73526001]
[66.46011353 103.61862183]
[66.59718323 95.28086853]
[68.77527618 87.23146820]
[72.86131287 79.96227264]
[63.07700348 68.59269714]
[53.29269409 57.22312164]
[43.50838089 45.85354614]
[33.72407150 34.48397064]
[18.99444962 38.48409653]
[3.98949933 35.68870163]
[-8.31153584 26.65281296]
[-15.46627617 13.17051220]
[-16.05414200 -2.08127999]
[-9.95841503 -16.07430840]
[1.61059666 -26.03024864]
[16.35585594 -29.97233963]
[31.34968185 -27.11787605]
[43.61503601 -18.03361511]
[50.71662903 -4.52324390]
[51.24443054 10.73074532]
[45.09364700 24.69966125]
[54.87795639 36.06923676]
[64.66226959 47.43881226]
[74.44657898 58.80838776]
[84.23088837 70.17796326]
[95.59338379 66.55451965]
[107.50663757 67.11126709]
[118.48167419 71.77861786]
[127.14677429 79.97323608]
[140.89520264 73.97485352]
[154.64364624 67.97647095]
[168.39207458 61.97809219]
[182.14050293 55.97971344]
[195.88894653 49.98133087]
[209.63737488 43.98295212]
[223.38580322 37.98456955]
[228.92573547 23.18305779]
[243.34371948 16.71025085]
[258.08584595 22.40635300]
[264.40585327 36.89196777]
[258.55419922 51.57303619]
[244.00257874 57.73954010]
[229.38418579 51.73300552]
[215.63575745 57.73138428]
[201.88732910 63.72976685]
[188.13888550 69.72814941]
[174.39045715 75.72652435]
[160.64201355 81.72490692]
[146.89358521 87.72328949]
[133.14515686 93.72166443]
[128.22325134 118.47882843]
[107.50000000 132.89025879]
[107.50000000 147.89025879]
[107.50000000 162.89025879]
[107.50000000 177.89025879]
[107.50000000 192.89025879]
[107.50000000 207.89025879]
[107.50000000 222.89025879]
[107.50000000 237.89025879]
[107.50000000 252.89025879]
[107.50000000 267.89025879]
[107.50000000 282.89025879]
[107.50000000 297.89025879]
[107.50000000 312.89025879]
[107.50000000 327.89025879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 83]
[2 82]
[3 81]
[4 80]
[5 79]
[6 78]
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
