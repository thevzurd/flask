%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Sun Apr 21 23:46:45 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAGCCACUCUCUGAUGAGAACAGCAUUGCUCAAUGGGAAGGCUGUUCGAAACUGAAGCCUUCCCUUCAGUAAGAGUGGCUGUA\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 300.27426147]
[92.50000000 285.27426147]
[92.50000000 270.27426147]
[92.50000000 255.27427673]
[92.50000000 240.27427673]
[92.50000000 225.27427673]
[92.50000000 210.27427673]
[92.50000000 195.27427673]
[92.50000000 180.27427673]
[92.50000000 165.27427673]
[92.50000000 150.27427673]
[92.50000000 135.27427673]
[83.59704590 132.11647034]
[75.81957245 126.75502014]
[69.70121002 119.55780792]
[65.66177368 111.01864624]
[63.97842026 101.72345734]
[64.76665497 92.31001282]
[67.97239685 83.42420959]
[73.37567902 75.67573547]
[64.64778900 63.47639084]
[55.91990662 51.27704239]
[47.19202423 39.07769775]
[38.46414185 26.87835121]
[29.73625755 14.67900562]
[15.32046413 19.26595306]
[0.19279744 19.17164803]
[-14.16468716 14.40532780]
[-26.34539032 5.43394804]
[-35.15597153 -6.86356592]
[-39.73325729 -21.28243065]
[-39.62881851 -36.41003036]
[-34.85287857 -50.76431656]
[-25.87333679 -62.93900681]
[-13.56992245 -71.74134827]
[0.85200489 -76.30896759]
[15.97953129 -76.19438934]
[30.33061600 -71.40883636]
[42.49928665 -62.42113876]
[51.29337692 -50.11182785]
[55.85133743 -35.68684387]
[55.72662354 -20.55939674]
[50.93144989 -6.21152258]
[41.93560410 5.95112181]
[50.66348648 18.15046883]
[59.39136887 30.34981346]
[68.11925507 42.54916000]
[76.84713745 54.74850464]
[85.57501984 66.94785309]
[99.82543945 63.93763733]
[114.10432434 66.80975342]
[126.08258057 75.09571075]
[133.80636597 87.44394684]
[148.64651489 85.25993347]
[163.48666382 83.07591248]
[178.32681274 80.89189911]
[193.16696167 78.70787811]
[208.00711060 76.52386475]
[222.84725952 74.33984375]
[232.07402039 61.50854111]
[247.68469238 59.04223251]
[260.41772461 68.40414429]
[262.71884155 84.04000854]
[253.22283936 96.67335510]
[237.56352234 98.80903625]
[225.03128052 89.17999268]
[210.19113159 91.36401367]
[195.35098267 93.54802704]
[180.51083374 95.73204803]
[165.67068481 97.91606140]
[150.83053589 100.10008240]
[135.99037170 102.28410339]
[127.29360962 123.57081604]
[107.50000000 135.27427673]
[107.50000000 150.27427673]
[107.50000000 165.27427673]
[107.50000000 180.27427673]
[107.50000000 195.27427673]
[107.50000000 210.27427673]
[107.50000000 225.27427673]
[107.50000000 240.27427673]
[107.50000000 255.27427673]
[107.50000000 270.27426147]
[107.50000000 285.27426147]
[107.50000000 300.27426147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 85]
[2 84]
[3 83]
[4 82]
[5 81]
[6 80]
[7 79]
[8 78]
[9 77]
[10 76]
[11 75]
[12 74]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
