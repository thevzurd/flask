%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Fri Apr 19 18:16:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUUCCUUAGCCUGAUGAGCGCCAGUGCUGCCCAAAGUGGCGCGAAACGGCCACUUUGGGCCGUAGCUAAGGAAGUUU\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 314.61746216]
[92.50000000 299.61746216]
[92.50000000 284.61746216]
[92.50000000 269.61746216]
[92.50000000 254.61746216]
[92.50000000 239.61746216]
[92.50000000 224.61746216]
[92.50000000 209.61746216]
[92.50000000 194.61746216]
[92.50000000 179.61746216]
[92.50000000 164.61746216]
[92.50000000 149.61746216]
[92.50000000 134.61746216]
[83.64368439 131.41798401]
[75.94336700 125.99802399]
[69.94326782 118.74063873]
[66.06743622 110.15874481]
[64.58981323 100.85887146]
[65.61483002 91.49830627]
[69.07003784 82.73859406]
[74.71123505 75.19884491]
[66.46859741 62.66653061]
[58.22596359 50.13421249]
[49.98332977 37.60189819]
[41.74069595 25.06958008]
[26.90950584 28.29451752]
[11.91545582 25.94017601]
[-1.21362972 18.32495689]
[-10.70215130 6.47876024]
[-15.26686382 -7.99631643]
[-14.29042721 -23.14263725]
[-7.90489721 -36.91178513]
[3.02613640 -47.44159698]
[17.02434158 -53.30800247]
[32.19657516 -53.71761703]
[46.49091339 -48.61504745]
[57.97417450 -38.69036865]
[65.09333038 -25.28581619]
[66.88558197 -10.21424484]
[63.10853577 4.48603964]
[54.27301407 16.82694435]
[62.51564789 29.35926247]
[70.75828552 41.89157867]
[79.00091553 54.42389679]
[87.24355316 66.95621490]
[100.00067902 64.57939911]
[112.75771332 66.95670319]
[123.80242157 73.76903534]
[131.65238953 84.10205841]
[146.17823792 80.36043549]
[160.70410156 76.61882019]
[175.22994995 72.87720490]
[189.75579834 69.13558960]
[204.28164673 65.39396667]
[212.09928894 51.65861511]
[227.36146545 47.55478287]
[241.01339722 55.51720810]
[244.95564270 70.82192230]
[236.84931946 84.38890839]
[221.50378418 88.16912079]
[208.02325439 79.91982269]
[193.49740601 83.66143799]
[178.97155762 87.40305328]
[164.44570923 91.14466858]
[149.91986084 94.88629150]
[135.39401245 98.62790680]
[127.99617767 121.69867706]
[107.50000000 134.61746216]
[107.50000000 149.61746216]
[107.50000000 164.61746216]
[107.50000000 179.61746216]
[107.50000000 194.61746216]
[107.50000000 209.61746216]
[107.50000000 224.61746216]
[107.50000000 239.61746216]
[107.50000000 254.61746216]
[107.50000000 269.61746216]
[107.50000000 284.61746216]
[107.50000000 299.61746216]
[107.50000000 314.61746216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
[11 70]
[12 69]
[13 68]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
